services:
  #############################################
  #                Examples/Research          #
  #############################################
  ########################## PGVector Experiment #########################################
  postgres:
    container_name: postgres
    image: pgvector/pgvector:0.6.1-pg16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_DB=${POSTGRES_DB:-ai_db}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER} || exit 1"
        ]
      interval: 5s
      timeout: 3s
    networks:
      - zuba
  ########################### End Postgres ####################################

  #########################  Jupyter Notebook #################################
  jupyter_notebook:
    build:
      context: ../examples
      dockerfile: ../examples/Dockerfile
    platform: linux/amd64
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_DB=${POSTGRES_DB:-ai_db}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - TRULENS_USER=${TRULENS_USER:-postgres}
      - TRULENS_PASSWORD=${TRULENS_PASSWORD:-root}
      - TRULENS_DB=${TRULENS_DB:-trulens}
      - TRULENS_PORT=${TRULENS_PORT:-5432}
      - TRULENS_HOST=trulens
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-12345678}
      - NEO4J_DB=${NEO4J_DB:-bclaws}
      - NEO4J_PORT=${NEO4J_PORT:-7687}
      - NEO4J_HOST=neo4j
    ports:
      - "8888:8888"
      - "8501:8501"
    depends_on:
      - postgres
    networks:
      - zuba
    ########################## AI Interface #########################################

    ########################## gradio #########################################
  gradio:
    container_name: gradio
    restart: unless-stopped
    build:
      context: ../gradio
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    platform: linux/amd64
    networks:
      - zuba

  ########################## End of gradio ##############################################

  ##################### AI Performance Tracking ####################################

  #############################################
  #                Production                 #
  #############################################

  trulens:
    container_name: trulens
    image: postgres:16.2
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${TRULENS_USER:-postgres}
      - POSTGRES_PASSWORD=${TRULENS_PASSWORD:-root}
      - POSTGRES_DB=${TRULENS_DB:-trulens}
    volumes:
      - trulensdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER} || exit 1"
        ]
      interval: 5s
      timeout: 3s
    networks:
      - zuba
  ##################### End AI Performance Tracking ################################

  ######################## NEO4J ###############################################
  neo4j:
    container_name: neo4j
    image: neo4j:5.18.1
    restart: unless-stopped
    environment:
      - USERNAME=${NEO4J_USERNAME:-neo4j}
      - PASSWORD=${NEO4J_PASSWORD:-12345678}
      - DB=${NEO4J_DB:-bclaws}
      - NEO4J_AUTH=none
      - NEO4JLABS_PLUGINS=["apoc"]
    volumes:
      - neo4j:/var/lib/neo4j/data
      - neo4j-backup:/var/lib/neo4j/backups
    ports:
      - "${NEO4J_PORT:-7474}:7474"
      - "${NEO4J_PORT:-7687}:7687"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${NEO4J_DB} -U $${NEO4J_USER} || exit 1"
        ]
      interval: 5s
      timeout: 3s
    networks:
      - zuba
  ######################## End NEO4J ############################################

  ######################## web FRONTEND ############################################

  web_frontend:
    container_name: web_frontend
    build:
      context: ../web/frontend
      dockerfile: Dockerfile
      target: prod
    ports:
      - "9000:9000"
    networks:
      - zuba
  ######################## End of web FRONTEND #####################################
  ##################### WEB FRONTEND FEEDBACK ANALYTICS ############################

  web_frontend_feedback_analytics:
    container_name: feedback_analytics
    build:
      context: ../web/frontend-feedback-analytics
      dockerfile: Dockerfile
    ports:
      - "11000:11000"
    networks:
      - zuba
  ##################### WEB FRONTEND FEEDBACK ANALYTICS ############################

  ########################## WEB BACKEND ############################################

  web_backend:
    container_name: web_backend
    build:
      context: ../web/backend-fastapi
      dockerfile: Dockerfile
    environment:
      - TRULENS_USER=${TRULENS_USER:-postgres}
      - TRULENS_PASSWORD=${TRULENS_PASSWORD:-root}
      - TRULENS_DB=${TRULENS_DB:-trulens}
      - TRULENS_PORT=${TRULENS_PORT:-5432}
      - TRULENS_HOST=trulens
      - DISABLE_NEST_ASYNCIO=True

    ports:
      - "10000:10000"
    networks:
      - zuba

########################### Networks Definition ################################
networks:
  zuba:
    name: zuba-net
    driver: bridge
########################### End Networks Definition #########################

########################### Volumes Definition ##############################
volumes:
  pgdata:
  trulensdata:
  neo4j:
  neo4j-backup:

    ########################### End Volumes Definition ##########################
